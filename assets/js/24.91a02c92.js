(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{392:function(t,s,a){"use strict";a.r(s);var r=a(25),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-模式"}},[t._v("#")]),t._v(" js 模式")]),t._v(" "),a("p",[t._v("原型 prototype是一个对象，每一个新创建的对象，都有一个私有属性，\n"),a("em",[a("strong",[t._v("proto")])]),t._v("，该属性指向原型对象。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// todo")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a = Object.create(null) 的原型对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("容易维护的代码特性：")]),t._v(" "),a("ul",[a("li",[t._v("阅读性好")]),t._v(" "),a("li",[t._v("各处一致性")]),t._v(" "),a("li",[t._v("具备较好预见性 边界条件")]),t._v(" "),a("li",[t._v("有较好的文档 参考vue")])]),t._v(" "),a("h4",{attrs:{id:"基本要求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本要求"}},[t._v("#")]),t._v(" 基本要求")]),t._v(" "),a("ol",[a("li",[t._v("少用全局变量 es5,否侧容易有冲突。")]),t._v(" "),a("li",[t._v("不要内置对象的原型增加方法、属性，比如Array，Object，Function对象")])]),t._v(" "),a("ul",[a("li",[t._v("比如可能在没有hasOwnProperty()的检查中出现\n除非后续的ECMAScript中支持，那就可以在es5中添加；\n或者某个特殊浏览器支持该方法，为了兼容性等；\n再或者团队沟通支持（逃）")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("针对switch case的要求")]),t._v(" "),a("ol",[a("li",[t._v("每个case语句都要有一个明确的 break")]),t._v(" "),a("li",[t._v("使用default语句作为switch的结束；")]),t._v(" "),a("li",[t._v("避免使用 fall-throughs (就是故意不适应break),\n让几种情况共用同一方法，或者让程序一直向下执行；")])])]),t._v(" "),a("li",[a("p",[t._v("避免使用隐式转换 用 === 替换 ==；")])]),t._v(" "),a("li",[a("p",[t._v("尽量不使用eval")])]),t._v(" "),a("li",[a("p",[t._v("parseInt()函数 请指定 具体的进制。")])]),t._v(" "),a("li",[a("p",[t._v("任何加法，只要有一项是 字符串，结果就是字符串\n任何乘法，只要有一项是 数字，结果类型就是数字")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'08'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'09hfafoe'")]),t._v("\n   \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8 number")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN number")]),t._v("\n   \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '20' string")]),t._v("\n")])])]),a("h3",{attrs:{id:"数组判断方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组判断方式"}},[t._v("#")]),t._v(" 数组判断方式")]),t._v(" "),a("ol",[a("li",[t._v("Array.isArray()")]),t._v(" "),a("li",[t._v("Object.prototype.toString.call()")]),t._v(" "),a("li",[t._v("arr instanceof Array\n//")]),t._v(" "),a("li",[t._v("Array.prototype.isPrototypeOf arr."),a("strong",[t._v("proto")])]),t._v(" "),a("li")]),t._v(" "),a("h3",{attrs:{id:"json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[t._v("#")]),t._v(" JSON")]),t._v(" "),a("p",[t._v("考虑使用"),a("code",[t._v("JSON.parse & JSON.stringify")])]),t._v(" "),a("h3",{attrs:{id:"正则表达式字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式字面量"}},[t._v("#")]),t._v(" 正则表达式字面量")]),t._v(" "),a("ul",[a("li",[t._v("new RegExp() 函数")]),t._v(" "),a("li",[t._v("字面量")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\\\/gi")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\\\\\'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gm'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("使用new RegExp方式构造时，需要转译 引号，通常也需要\n双反斜杠，上面两种都是匹配单个 反斜杠 \\ ,\n因为在第二种方式里，\\ 双反斜杠才表示 为 一个斜杠 \\")]),t._v(" "),a("p",[t._v("/ 这个是正常斜杠 也叫分割符")])])}),[],!1,null,null,null);s.default=e.exports}}]);