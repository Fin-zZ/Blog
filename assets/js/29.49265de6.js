(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{400:function(t,s,l){"use strict";l.r(s);var v=l(25),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,l=t._self._c||s;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"web安全"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#web安全"}},[t._v("#")]),t._v(" web安全")]),t._v(" "),l("h2",{attrs:{id:"xss-cross-site-scripting-跨站脚本攻击"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#xss-cross-site-scripting-跨站脚本攻击"}},[t._v("#")]),t._v(" XSS(Cross Site scripting)跨站脚本攻击")]),t._v(" "),l("p",[t._v("恶意的代码混入用户端处代码里，而浏览器无法区分，导致被执行。\n由于是在用户端处，所以能够获取到用户的cookie等个人信息。")]),t._v(" "),l("h3",{attrs:{id:"入侵渠道"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#入侵渠道"}},[t._v("#")]),t._v(" 入侵渠道")]),t._v(" "),l("p",[t._v("那又是哪些渠道被注入恶意代码的呢")]),t._v(" "),l("ol",[l("li",[t._v("通过用户UGC（user generate content）:输入框等")]),t._v(" "),l("li",[t._v("url")]),t._v(" "),l("li",[t._v("第三方链接")]),t._v(" "),l("li",[t._v("post表单参数")]),t._v(" "),l("li",[t._v("cookie（子域的混入）")]),t._v(" "),l("li",[t._v("Referer")])]),t._v(" "),l("h3",{attrs:{id:"xss分类"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#xss分类"}},[t._v("#")]),t._v(" XSS分类")]),t._v(" "),l("ol",[l("li",[l("p",[t._v("反射型攻击 构造出恶意的url，诱骗用户点击后，服务器端会返回html给浏览器，同时包含有恶意代码的片段也被返回和\n被浏览器解析，导致恶意代码最终被执行。 常见于通过url传递参数的场景，比如 search会带上参数， 链接跳转；服务器\n返回数据时也会带上输入的参数。还有post提交表单时也有可能发生。")])]),t._v(" "),l("li",[l("p",[t._v("存储型攻击 恶意代码被发送到服务器端数据库，其他用户访问该资源时，此处内容返回给浏览器，\n且代码每次被访问都会执行。 比如商品评论，论坛发帖，文章，用户对话私信；")])])]),t._v(" "),l("p",[t._v("反射型和存储型的区别：\n反射型通常借助url、存储型借助数据库返回恶意代码。")]),t._v(" "),l("ol",{attrs:{start:"3"}},[l("li",[t._v("DOM XSS型 攻击者构建恶意url，用户打开后，浏览器打开并解析，由前端js执行url中的恶意代码。\n与前两种区别在于这是由浏览器自身解析和执行，未经过服务器端，属于前端js自身漏洞。")])]),t._v(" "),l("h3",{attrs:{id:"防范"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#防范"}},[t._v("#")]),t._v(" 防范")]),t._v(" "),l("p",[t._v("攻击主要分成两类")]),t._v(" "),l("ul",[l("li",[t._v("用户侧输入了恶意代码并提交")]),t._v(" "),l("li",[t._v("浏览器返回并解析执行了恶意代码")])]),t._v(" "),l("ol",[l("li",[t._v("防止用户侧输入的内容带有恶意代码\n"),l("ul",[l("li",[t._v("输入侧针对明确要求的内容，可进行限制，例如手机号 邮箱")])])]),t._v(" "),l("li",[t._v("防止浏览器执行解析恶意代码\n"),l("ul",[l("li",[t._v("防止在HTML中出现恶意代码\n由于存储型和反射型XSS攻击都是插入到HTML里的，\n所以需要一定防范。\n"),l("ul",[l("li",[t._v("改为纯前端渲染，api只请求数据，使得html结构不会由接口返回定义")]),t._v(" "),l("li",[t._v("如果不能纯前端渲染，则需对后台传来的html进行充分转译\n第一种指的是，浏览器最开始加载一个无数据的html，之后按序加载JS标签并发起ajax请求，\n接口拿到"),l("code",[t._v("数据")]),t._v("后，再去渲染页面，渲染的时候，各个数据也很明确属于哪个部分，比如\ninnerHtml，style等。\n缺点时无法进行seo，且需要注意dom xss攻击\n第二种 拼接html的，可以借助成熟的模版库协助。")])])]),t._v(" "),l("li",[t._v("防止在JS中出现恶意代码\n本质是js代码里不严谨，执行了不可信的js代码。\nVue/React针对v-html、dangerouslySetInnerHTML要谨慎\n原生js，包括jquery需要注意innerHtml,outHtml,document.write()等，\n包括js的eval函数")])])])]),t._v(" "),l("h4",{attrs:{id:"额外的防范"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#额外的防范"}},[t._v("#")]),t._v(" 额外的防范")]),t._v(" "),l("ol",[l("li",[t._v("开启CSP(Content-Security-Policy),可以设置哪些域名下的资源可被加载。")]),t._v(" "),l("li",[t._v("开启http-only，这项是针对cookie只能被服务端读取，js无法获取到")])]),t._v(" "),l("p",[t._v("参考：")]),t._v(" "),l("ul",[l("li",[t._v("(美团)[https://segmentfault.com/a/1190000016551188]")]),t._v(" "),l("li",[t._v("(link)[https://www.cnblogs.com/tugenhua0707/p/10909284.html#_labe0]")])])])}),[],!1,null,null,null);s.default=_.exports}}]);